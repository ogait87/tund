#!/usr/bin/env python2

import sys
import argparse
import ConfigParser
import subprocess
import datetime
import signal

# http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/
import sys, os, time, atexit
from signal import SIGTERM

class Daemon:
        """
        A generic daemon class.
       
        Usage: subclass the Daemon class and override the run() method
        """
        def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
                self.stdin = stdin
                self.stdout = stdout
                self.stderr = stderr
                self.pidfile = pidfile
       
        def daemonize(self):
                """
                do the UNIX double-fork magic, see Stevens' "Advanced
                Programming in the UNIX Environment" for details (ISBN 0201563177)
                http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
                """
                try:
                        pid = os.fork()
                        if pid > 0:
                                # exit first parent
                                sys.exit(0)
                except OSError, e:
                        sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
                        sys.exit(1)
       
                # decouple from parent environment
                os.chdir("/")
                os.setsid()
                os.umask(0)
       
                # do second fork
                try:
                        pid = os.fork()
                        if pid > 0:
                                # exit from second parent
                                sys.exit(0)
                except OSError, e:
                        sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
                        sys.exit(1)
       
                # redirect standard file descriptors
                sys.stdout.flush()
                sys.stderr.flush()
                si = file(self.stdin, 'r')
                so = file(self.stdout, 'a+')
                se = file(self.stderr, 'a+', 0)
                os.dup2(si.fileno(), sys.stdin.fileno())
                os.dup2(so.fileno(), sys.stdout.fileno())
                os.dup2(se.fileno(), sys.stderr.fileno())
       
                # write pidfile
                atexit.register(self.delpid)
                pid = str(os.getpid())
                file(self.pidfile,'w+').write("%s\n" % pid)
       
        def delpid(self):
                os.remove(self.pidfile)
 
        def start(self):
                """
                Start the daemon
                """
                # Check for a pidfile to see if the daemon already runs
                try:
                        pf = file(self.pidfile,'r')
                        pid = int(pf.read().strip())
                        pf.close()
                except IOError:
                        pid = None
       
                if pid:
                        message = "pidfile %s already exist. Daemon already running?\n"
                        sys.stderr.write(message % self.pidfile)
                        sys.exit(1)
               
                # Start the daemon
                self.daemonize()
                self.run()
 
        def stop(self):
                """
                Stop the daemon
                """
                # Get the pid from the pidfile
                try:
                        pf = file(self.pidfile,'r')
                        pid = int(pf.read().strip())
                        pf.close()
                except IOError:
                        pid = None
       
                if not pid:
                        message = "pidfile %s does not exist. Daemon not running?\n"
                        sys.stderr.write(message % self.pidfile)
                        return # not an error in a restart
 
                # Try killing the daemon process       
                try:
                        while 1:
                                #os.kill(pid, SIGTERM)
                                os.killpg(os.getpgid(pid), SIGTERM)
                                time.sleep(0.1)
                except OSError, err:
                        err = str(err)
                        if err.find("No such process") > 0:
                                if os.path.exists(self.pidfile):
                                        os.remove(self.pidfile)
                        else:
                                print str(err)
                                sys.exit(1)

        def restart(self):
                """
                Restart the daemon
                """
                self.stop()
                self.start()
 
        def run(self):
                """
                You should override this method when you subclass Daemon. It will be called after the process has been
                daemonized by start() or restart().
                """

class MyDaemon(Daemon):
    def run(self):
        print "========================================================"
        print "========================================================"
        print self.cmd
        print " ".join(self.cmd)

        while True:
            print
            print datetime.datetime.now()
            sys.stdout.flush()
            subprocess.call(self.cmd)
            print "sleeping ..."
            sys.stdout.flush()
            time.sleep(self.daemon_delay)

def config_get(config, section, option, default = None):
    if config.has_option(section, option):
        return config.get(section, option)
    else:
        return default

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Keeps a reverse ssh tunnel open')
    parser.add_argument('--config', required=True, help='Path to config file')
    parser.add_argument('command',                 help='start|stop|reload|setup')

    args = parser.parse_args()

    if not args.command in ["start", "stop", "reload", "setup"]:
        raise RuntimeError("Invalid command '%s'" % args.command)

    config = ConfigParser.ConfigParser()
    config.read(args.config)

    if config_get(config, "Daemon", "enabled", "false").lower() in ["true", "1", "y"]:
        enabled = True
    else:
        enabled = False

    if not enabled:
        print "Service not enabled in '%s'" % args.config
        sys.exit(0)

    Hostname     = config_get(config, "Server", "Hostname")
    Port         = config_get(config, "Server", "Port")
    User         = config_get(config, "Server", "User")
    IdentityFile = config_get(config, "Server", "IdentityFile")
    RemoteBind   = config_get(config, "Server", "RemoteBind")
    RemotePort   = config_get(config, "Server", "RemotePort")

    daemon_pid_file = config_get(config, "Daemon", "pid_file", "/var/run/tund.pid")
    daemon_log_file = config_get(config, "Daemon", "log_file", "/var/log/tund.log")
    daemon_delay    = float(config_get(config, "Daemon", "delay", 60))

    if Hostname == None:
        raise RuntimeError("Invalid Hostname '%s'" % Hostname)

    cmd = ["ssh", Hostname]

    if Port != None:
        cmd += ["-p", str(Port)]

    if User != None:
        cmd += ["-l", str(User)]

    if IdentityFile != None:
        cmd += ["-i", str(IdentityFile)]

    if args.command == "start":
        if RemotePort == None:
            raise RuntimeError("Invalid RemotePort '%s'" % RemotePort)

        RemoteDef = "%s:127.0.0.1:22" % RemotePort

        if RemoteBind != None:
            RemoteDef = RemoteBind + ":" + RemoteDef

        cmd += ["-R", RemoteDef]

    if args.command == "setup":
        cmd += ["--", "echo", "OK"]
    else:
        cmd += ["-N"]

    daemon = MyDaemon(daemon_pid_file, stdout = daemon_log_file, stderr = daemon_log_file)
    daemon.cmd          = cmd
    daemon.daemon_delay = daemon_delay

    if args.command == "start":
        daemon.start()

    elif args.command == "stop":
        daemon.stop()

    elif args.command == "restart":
        daemon.restart()

    elif args.command == "setup":
        subprocess.call(cmd)
        print "Done"

